#+TITLE: The Kima programming language
#+AUTHOR: Michail Pardalos
#+EMAIL: mpardalos@gmail.com

* Types
In Kima there are two kinds of types:
** Builtins
These include:
+ Ints
+ Floats
+ Strings
+ Bools
+ Unit
+ Functions
Functions are so far the only parameterized type. A function type is
parameterized by its argument types and return type.
** User-defined types
These are defined using the ~data~ keyword, and are non-parametric. Types of
this kind are solely defined by their name.

* Data definitions
There are two kinds of data definitions.
** Records
A record definition has the following structure:
#+BEGIN_SRC
data NAME (
    NAME_1: mut TYPE_1,
    NAME_2: TYPE_2,
    ...
    NAME_N: TYPE_N,
);
#+END_SRC
It defines a user type ~NAME~ along with the following:
+ A constructor \\
  ~{NAME} : (TYPE_1, ..., TYPE_N) -> NAME~
+ Accessors\\
  ~{.NAME_1} : (NAME) -> TYPE_1~\\
  ~{.NAME_2} : (NAME) -> TYPE_2~\\
  ...\\
  ~{.NAME_N} : (NAME) -> TYPE_N~
+ Setters\\


  
** Enums
An enum declaration has the following form:
#+BEGIN_SRC
data NAME {
    CONSTRUCTOR_1(ARG_11, ARG_12, ..., ARG_1N),
    CONSTRUCTOR_2(ARG_21, ARG_22, ..., ARG_2N),
    ... ,
    CONSTRUCTOR_M(ARG_M1, ARG_M2, ..., ARG_MN),
};
#+END_SRC
It defines a user type ~NAME~ along with constructors:\\
  ~{CONSTRUCTOR_1} : (ARG_1, ..., ARG_N) -> NAME~\\
  ...\\
  ~{CONSTRUCTOR_M} : (ARG_1, ..., ARG_N) -> NAME~\\

* Pattern matching
Pattern matching is done through a ~case~ expression.
#+BEGIN_SRC
data Event {
    Click(Button, Pos),
    KeyPress(Char),
    Quit
};

fun what_event(ev: Event) -> String {
    case ev {
        Click(btn, pos) { btn + " click" }
        KeyPress(btn)   { "key " + btn   }
        Quit            { "quit"         }
    } 
}
#+END_SRC

Incomplete patterns are an error.
* Accessors
